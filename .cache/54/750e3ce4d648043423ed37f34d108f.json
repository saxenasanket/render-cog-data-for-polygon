{"id":"node_modules/hashed/lib/store.js","dependencies":[{"name":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/package.json","includedInParent":true,"mtime":1593438823285},{"name":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/package.json","includedInParent":true,"mtime":1594402356003},{"name":"./schema","loc":{"line":1,"column":23},"parent":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/store.js","resolved":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/schema.js"},{"name":"./util","loc":{"line":2,"column":21},"parent":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/store.js","resolved":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/util.js"},{"name":"./serializers","loc":{"line":3,"column":28},"parent":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/store.js","resolved":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/serializers.js"}],"generated":{"js":"const Schema = require('./schema').Schema;\nconst util = require('./util');\nconst serializers = require('./serializers');\n\n/**\n * An object backed store of string values.  Allows registering multiple state\n * providers.\n * @param {Object} values Initial serialized values.\n * @param {function(Object)} callback Called with an object of serialized\n *     values and defaults whenever a provider updates state.\n * @constructor\n */\nconst Store = (exports.Store = function(values, callback) {\n  this._values = values;\n  this._defaults = {};\n  this._providers = [];\n  this._callback = callback;\n  this._callbackTimer = null;\n});\n\nStore.prototype._scheduleCallback = function() {\n  if (this._callbackTimer) {\n    clearTimeout(this._callbackTimer);\n  }\n  this._callbackTimer = setTimeout(this._debouncedCallback.bind(this));\n};\n\nStore.prototype._debouncedCallback = function() {\n  this._callbackTimer = null;\n  this._callback(this._values, this._defaults);\n};\n\nStore.prototype.update = function(values) {\n  if (this._updateTimer) {\n    clearTimeout(this._updateTimer);\n  }\n  this._updateTimer = setTimeout(this._debouncedUpdate.bind(this, values));\n};\n\nStore.prototype._debouncedUpdate = function(newValues) {\n  this._updateTimer = null;\n  const values = this._values;\n  const providers = this._providers.slice(); // callbacks may unregister providers\n  for (let i = providers.length - 1; i >= 0; --i) {\n    const provider = providers[i];\n    const schema = provider.schema;\n    let changed = false;\n    const state = {};\n    schema.forEachKey(function(key, prefixed) {\n      let deserialized;\n      if (!(prefixed in newValues)) {\n        deserialized = schema.getDefault(key);\n        const serializedDefault = schema.serialize(key, deserialized);\n        if (values[prefixed] !== serializedDefault) {\n          changed = true;\n          values[prefixed] = serializedDefault;\n          state[key] = deserialized;\n        }\n      } else if (values[prefixed] !== newValues[prefixed]) {\n        try {\n          deserialized = schema.deserialize(key, newValues[prefixed]);\n          values[prefixed] = newValues[prefixed];\n          state[key] = deserialized;\n          changed = true;\n        } catch (err) {\n          // invalid value, pass\n        }\n      }\n    });\n    if (changed && this._providers.indexOf(provider) >= 0) {\n      provider.callback(state);\n    }\n  }\n};\n\n/**\n * Unregister a provider.  Deletes the provider's values from the underlying\n * store and calls the store's callback.\n * @param {Function} callback The provider's callback.\n */\nStore.prototype.unregister = function(callback) {\n  let removedProvider;\n  this._providers = this._providers.filter(function(provider) {\n    const remove = provider.callback === callback;\n    if (remove) {\n      removedProvider = provider;\n    }\n    return !remove;\n  });\n  if (!removedProvider) {\n    throw new Error('Unable to unregister hashed state provider');\n  }\n  const values = this._values;\n  const defaults = this._defaults;\n  removedProvider.schema.forEachKey(function(key, prefixed) {\n    delete values[prefixed];\n    delete defaults[prefixed];\n  });\n  this._scheduleCallback();\n};\n\n/**\n * Register a new state provider.\n * @param {Object} config Schema config.\n * @param {function(Object)} callback Called by the store on state changes.\n * @return {function(Object)} Called by the provider on state changes.\n */\nStore.prototype.register = function(config, callback) {\n  const provider = {\n    schema: new Schema(config),\n    callback: callback\n  };\n\n  // ensure there are no conflicts with existing providers\n  for (let i = 0, ii = this._providers.length; i < ii; ++i) {\n    const conflicts = provider.schema.conflicts(this._providers[i].schema);\n    if (conflicts) {\n      throw new Error(\n        'Provider already registered using the same name: ' + conflicts\n      );\n    }\n    if (provider.callback === this._providers[i].callback) {\n      throw new Error('Provider already registered with the same callback');\n    }\n  }\n\n  this._providers.push(provider);\n  this._initializeProvider(provider);\n\n  return function update(state) {\n    if (this._providers.indexOf(provider) === -1) {\n      throw new Error('Unregistered provider attempting to update state');\n    }\n    const schema = provider.schema;\n    let changed = false;\n    const values = this._values;\n    schema.forEachKey(function(key, prefixed) {\n      if (key in state) {\n        const serializedValue = schema.serialize(key, state[key], state);\n        if (values[prefixed] !== serializedValue) {\n          changed = true;\n          values[prefixed] = serializedValue;\n        }\n      }\n    });\n    if (changed) {\n      this._scheduleCallback();\n    }\n  }.bind(this);\n};\n\n/**\n * Call provider with initial values.\n * @param {Object} provider Provider to be initialized.\n */\nStore.prototype._initializeProvider = function(provider) {\n  const state = {};\n  const defaults = {};\n  const values = this._values;\n  provider.schema.forEachKey(function(key, prefixed) {\n    let deserializedValue;\n    const deserializedDefault = provider.schema.getDefault(key);\n    const serializedDefault = provider.schema.serialize(\n      key,\n      deserializedDefault\n    );\n    if (prefixed in values) {\n      try {\n        deserializedValue = provider.schema.deserialize(key, values[prefixed]);\n      } catch (err) {\n        deserializedValue = deserializedDefault;\n      }\n    } else {\n      deserializedValue = deserializedDefault;\n    }\n    state[key] = deserializedValue;\n    defaults[prefixed] = serializedDefault;\n    values[prefixed] = provider.schema.serialize(key, deserializedValue);\n  });\n  for (const prefixed in defaults) {\n    this._defaults[prefixed] = defaults[prefixed];\n  }\n  provider.callback(state);\n};\n\n/**\n * Serialize values with provider serializers where available.\n * @param {Object} values Values to be serialized.\n * @return {Object} The serialized values.\n */\nStore.prototype.serialize = function(values) {\n  const serialized = {};\n  for (let i = 0, ii = this._providers.length; i < ii; ++i) {\n    const provider = this._providers[i];\n    provider.schema.forEachKey(function(key, prefixed) {\n      if (prefixed in values) {\n        serialized[prefixed] = provider.schema.serialize(\n          key,\n          values[prefixed],\n          values\n        );\n      }\n    });\n  }\n  for (const key in values) {\n    if (!(key in serialized)) {\n      const value = values[key];\n      const type = util.typeOf(value);\n      const serializer = serializers.get(type);\n      serialized[key] = serializer(value);\n    }\n  }\n  return serialized;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/hashed/lib/store.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/hashed/lib/store.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}}],"sources":{"node_modules/hashed/lib/store.js":"const Schema = require('./schema').Schema;\nconst util = require('./util');\nconst serializers = require('./serializers');\n\n/**\n * An object backed store of string values.  Allows registering multiple state\n * providers.\n * @param {Object} values Initial serialized values.\n * @param {function(Object)} callback Called with an object of serialized\n *     values and defaults whenever a provider updates state.\n * @constructor\n */\nconst Store = (exports.Store = function(values, callback) {\n  this._values = values;\n  this._defaults = {};\n  this._providers = [];\n  this._callback = callback;\n  this._callbackTimer = null;\n});\n\nStore.prototype._scheduleCallback = function() {\n  if (this._callbackTimer) {\n    clearTimeout(this._callbackTimer);\n  }\n  this._callbackTimer = setTimeout(this._debouncedCallback.bind(this));\n};\n\nStore.prototype._debouncedCallback = function() {\n  this._callbackTimer = null;\n  this._callback(this._values, this._defaults);\n};\n\nStore.prototype.update = function(values) {\n  if (this._updateTimer) {\n    clearTimeout(this._updateTimer);\n  }\n  this._updateTimer = setTimeout(this._debouncedUpdate.bind(this, values));\n};\n\nStore.prototype._debouncedUpdate = function(newValues) {\n  this._updateTimer = null;\n  const values = this._values;\n  const providers = this._providers.slice(); // callbacks may unregister providers\n  for (let i = providers.length - 1; i >= 0; --i) {\n    const provider = providers[i];\n    const schema = provider.schema;\n    let changed = false;\n    const state = {};\n    schema.forEachKey(function(key, prefixed) {\n      let deserialized;\n      if (!(prefixed in newValues)) {\n        deserialized = schema.getDefault(key);\n        const serializedDefault = schema.serialize(key, deserialized);\n        if (values[prefixed] !== serializedDefault) {\n          changed = true;\n          values[prefixed] = serializedDefault;\n          state[key] = deserialized;\n        }\n      } else if (values[prefixed] !== newValues[prefixed]) {\n        try {\n          deserialized = schema.deserialize(key, newValues[prefixed]);\n          values[prefixed] = newValues[prefixed];\n          state[key] = deserialized;\n          changed = true;\n        } catch (err) {\n          // invalid value, pass\n        }\n      }\n    });\n    if (changed && this._providers.indexOf(provider) >= 0) {\n      provider.callback(state);\n    }\n  }\n};\n\n/**\n * Unregister a provider.  Deletes the provider's values from the underlying\n * store and calls the store's callback.\n * @param {Function} callback The provider's callback.\n */\nStore.prototype.unregister = function(callback) {\n  let removedProvider;\n  this._providers = this._providers.filter(function(provider) {\n    const remove = provider.callback === callback;\n    if (remove) {\n      removedProvider = provider;\n    }\n    return !remove;\n  });\n  if (!removedProvider) {\n    throw new Error('Unable to unregister hashed state provider');\n  }\n  const values = this._values;\n  const defaults = this._defaults;\n  removedProvider.schema.forEachKey(function(key, prefixed) {\n    delete values[prefixed];\n    delete defaults[prefixed];\n  });\n  this._scheduleCallback();\n};\n\n/**\n * Register a new state provider.\n * @param {Object} config Schema config.\n * @param {function(Object)} callback Called by the store on state changes.\n * @return {function(Object)} Called by the provider on state changes.\n */\nStore.prototype.register = function(config, callback) {\n  const provider = {\n    schema: new Schema(config),\n    callback: callback\n  };\n\n  // ensure there are no conflicts with existing providers\n  for (let i = 0, ii = this._providers.length; i < ii; ++i) {\n    const conflicts = provider.schema.conflicts(this._providers[i].schema);\n    if (conflicts) {\n      throw new Error(\n        'Provider already registered using the same name: ' + conflicts\n      );\n    }\n    if (provider.callback === this._providers[i].callback) {\n      throw new Error('Provider already registered with the same callback');\n    }\n  }\n\n  this._providers.push(provider);\n  this._initializeProvider(provider);\n\n  return function update(state) {\n    if (this._providers.indexOf(provider) === -1) {\n      throw new Error('Unregistered provider attempting to update state');\n    }\n    const schema = provider.schema;\n    let changed = false;\n    const values = this._values;\n    schema.forEachKey(function(key, prefixed) {\n      if (key in state) {\n        const serializedValue = schema.serialize(key, state[key], state);\n        if (values[prefixed] !== serializedValue) {\n          changed = true;\n          values[prefixed] = serializedValue;\n        }\n      }\n    });\n    if (changed) {\n      this._scheduleCallback();\n    }\n  }.bind(this);\n};\n\n/**\n * Call provider with initial values.\n * @param {Object} provider Provider to be initialized.\n */\nStore.prototype._initializeProvider = function(provider) {\n  const state = {};\n  const defaults = {};\n  const values = this._values;\n  provider.schema.forEachKey(function(key, prefixed) {\n    let deserializedValue;\n    const deserializedDefault = provider.schema.getDefault(key);\n    const serializedDefault = provider.schema.serialize(\n      key,\n      deserializedDefault\n    );\n    if (prefixed in values) {\n      try {\n        deserializedValue = provider.schema.deserialize(key, values[prefixed]);\n      } catch (err) {\n        deserializedValue = deserializedDefault;\n      }\n    } else {\n      deserializedValue = deserializedDefault;\n    }\n    state[key] = deserializedValue;\n    defaults[prefixed] = serializedDefault;\n    values[prefixed] = provider.schema.serialize(key, deserializedValue);\n  });\n  for (const prefixed in defaults) {\n    this._defaults[prefixed] = defaults[prefixed];\n  }\n  provider.callback(state);\n};\n\n/**\n * Serialize values with provider serializers where available.\n * @param {Object} values Values to be serialized.\n * @return {Object} The serialized values.\n */\nStore.prototype.serialize = function(values) {\n  const serialized = {};\n  for (let i = 0, ii = this._providers.length; i < ii; ++i) {\n    const provider = this._providers[i];\n    provider.schema.forEachKey(function(key, prefixed) {\n      if (prefixed in values) {\n        serialized[prefixed] = provider.schema.serialize(\n          key,\n          values[prefixed],\n          values\n        );\n      }\n    });\n  }\n  for (const key in values) {\n    if (!(key in serialized)) {\n      const value = values[key];\n      const type = util.typeOf(value);\n      const serializer = serializers.get(type);\n      serialized[key] = serializer(value);\n    }\n  }\n  return serialized;\n};\n"},"lineCount":215}},"error":null,"hash":"f60f743d70a3d6e27d67706067a42687","cacheData":{"env":{}}}