{"id":"node_modules/hashed/lib/schema.js","dependencies":[{"name":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/package.json","includedInParent":true,"mtime":1593438823285},{"name":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/package.json","includedInParent":true,"mtime":1594402356003},{"name":"./field","loc":{"line":1,"column":22},"parent":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/schema.js","resolved":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/field.js"},{"name":"./util","loc":{"line":2,"column":21},"parent":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/schema.js","resolved":"/Users/sanketsaxena/Desktop/pixxel/demo/ndvi-cog-rendering/node_modules/hashed/lib/util.js"}],"generated":{"js":"const Field = require('./field').Field;\nconst util = require('./util');\n\n/**\n * Create a new schema.  A schema is a collection of field definitions.\n * @param {Object} config Keys are field names, values are field configs.\n * @constructor\n */\nconst Schema = (exports.Schema = function(config) {\n  config = util.extend({}, config);\n  const fields = {};\n  let prefix;\n  if ('_' in config) {\n    prefix = config._;\n    delete config._;\n  }\n  for (const key in config) {\n    fields[key] = new Field(config[key]);\n  }\n  this._prefix = prefix;\n  this._fields = fields;\n});\n\n/**\n * Get the prefixed version of a key.\n * @param {string} key The key.\n * @return {string} The prefixed key.\n */\nSchema.prototype.getPrefixed = function(key) {\n  return this._prefix ? this._prefix + '.' + key : key;\n};\n\n/**\n * Call a callback for each field key.\n * @param {function(string, number)} callback Called with a local field key and\n *     a prefixed key.\n * @param {Object} thisArg This argument for the callback.\n */\nSchema.prototype.forEachKey = function(callback, thisArg) {\n  let more;\n  for (const key in this._fields) {\n    more = callback.call(thisArg, key, this.getPrefixed(key));\n    if (more === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Serialize a value.\n * @param {string} key The key or field name.\n * @param {*} value The value to serialize.\n * @param {Object} values Additional values for providers to use when serializing.\n * @return {string} The serialized value.\n */\nSchema.prototype.serialize = function(key, value, values) {\n  if (!(key in this._fields)) {\n    throw new Error('Unknown key: ' + key);\n  }\n  return this._fields[key].serialize(value, values);\n};\n\n/**\n * Deserialize a value.\n * @param {string} key The key or field name.\n * @param {string} str The serialized value.\n * @return {*} The deserialized value.\n */\nSchema.prototype.deserialize = function(key, str) {\n  if (!(key in this._fields)) {\n    throw new Error('Unknown key: ' + key);\n  }\n  return this._fields[key].deserialize(str);\n};\n\n/**\n * Get the default value for a particular field.\n * @param {string} key The key or field name.\n * @return {*} The default value.\n */\nSchema.prototype.getDefault = function(key) {\n  if (!(key in this._fields)) {\n    throw new Error('Unknown key: ' + key);\n  }\n  return this._fields[key].default;\n};\n\n/**\n * Determine if one schema conflicts with another.  Two schemas conflict if\n * any of their prefixed keys are the same.\n * @param {Schema} other The other schema.\n * @return {boolean|string} This schema conflicts with the other.  If the two\n *     schemas conflict, the return will be the first conflicting key (with\n *     any prefix).\n */\nSchema.prototype.conflicts = function(other) {\n  const thisPrefixedKeys = {};\n  for (const key in this._fields) {\n    thisPrefixedKeys[this.getPrefixed(key)] = true;\n  }\n\n  let conflicts = false;\n  other.forEachKey(function(_, prefixed) {\n    if (prefixed in thisPrefixedKeys) {\n      conflicts = prefixed;\n    }\n    return !conflicts;\n  });\n  return conflicts;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/hashed/lib/schema.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/hashed/lib/schema.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}}],"sources":{"node_modules/hashed/lib/schema.js":"const Field = require('./field').Field;\nconst util = require('./util');\n\n/**\n * Create a new schema.  A schema is a collection of field definitions.\n * @param {Object} config Keys are field names, values are field configs.\n * @constructor\n */\nconst Schema = (exports.Schema = function(config) {\n  config = util.extend({}, config);\n  const fields = {};\n  let prefix;\n  if ('_' in config) {\n    prefix = config._;\n    delete config._;\n  }\n  for (const key in config) {\n    fields[key] = new Field(config[key]);\n  }\n  this._prefix = prefix;\n  this._fields = fields;\n});\n\n/**\n * Get the prefixed version of a key.\n * @param {string} key The key.\n * @return {string} The prefixed key.\n */\nSchema.prototype.getPrefixed = function(key) {\n  return this._prefix ? this._prefix + '.' + key : key;\n};\n\n/**\n * Call a callback for each field key.\n * @param {function(string, number)} callback Called with a local field key and\n *     a prefixed key.\n * @param {Object} thisArg This argument for the callback.\n */\nSchema.prototype.forEachKey = function(callback, thisArg) {\n  let more;\n  for (const key in this._fields) {\n    more = callback.call(thisArg, key, this.getPrefixed(key));\n    if (more === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Serialize a value.\n * @param {string} key The key or field name.\n * @param {*} value The value to serialize.\n * @param {Object} values Additional values for providers to use when serializing.\n * @return {string} The serialized value.\n */\nSchema.prototype.serialize = function(key, value, values) {\n  if (!(key in this._fields)) {\n    throw new Error('Unknown key: ' + key);\n  }\n  return this._fields[key].serialize(value, values);\n};\n\n/**\n * Deserialize a value.\n * @param {string} key The key or field name.\n * @param {string} str The serialized value.\n * @return {*} The deserialized value.\n */\nSchema.prototype.deserialize = function(key, str) {\n  if (!(key in this._fields)) {\n    throw new Error('Unknown key: ' + key);\n  }\n  return this._fields[key].deserialize(str);\n};\n\n/**\n * Get the default value for a particular field.\n * @param {string} key The key or field name.\n * @return {*} The default value.\n */\nSchema.prototype.getDefault = function(key) {\n  if (!(key in this._fields)) {\n    throw new Error('Unknown key: ' + key);\n  }\n  return this._fields[key].default;\n};\n\n/**\n * Determine if one schema conflicts with another.  Two schemas conflict if\n * any of their prefixed keys are the same.\n * @param {Schema} other The other schema.\n * @return {boolean|string} This schema conflicts with the other.  If the two\n *     schemas conflict, the return will be the first conflicting key (with\n *     any prefix).\n */\nSchema.prototype.conflicts = function(other) {\n  const thisPrefixedKeys = {};\n  for (const key in this._fields) {\n    thisPrefixedKeys[this.getPrefixed(key)] = true;\n  }\n\n  let conflicts = false;\n  other.forEachKey(function(_, prefixed) {\n    if (prefixed in thisPrefixedKeys) {\n      conflicts = prefixed;\n    }\n    return !conflicts;\n  });\n  return conflicts;\n};\n"},"lineCount":111}},"error":null,"hash":"8c32e7b7f79bcb92221cc7f1137ae020","cacheData":{"env":{}}}