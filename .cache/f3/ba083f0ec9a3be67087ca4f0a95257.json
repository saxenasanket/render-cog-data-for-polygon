{"id":"node_modules/hashed/lib/serializers.js","dependencies":[{"name":"/Users/sanketsaxena/Desktop/pixxel/intact/ol-ext-parcel-bundler/package.json","includedInParent":true,"mtime":1588919574011},{"name":"/Users/sanketsaxena/Desktop/pixxel/intact/ol-ext-parcel-bundler/node_modules/hashed/package.json","includedInParent":true,"mtime":1588919548059},{"name":"util","loc":{"line":1,"column":21},"parent":"/Users/sanketsaxena/Desktop/pixxel/intact/ol-ext-parcel-bundler/node_modules/hashed/lib/serializers.js","resolved":"/Users/sanketsaxena/Desktop/pixxel/intact/ol-ext-parcel-bundler/node_modules/util/util.js"}],"generated":{"js":"const util = require('util');\n\nconst enc = encodeURIComponent;\n\nconst serializers = {\n  string: function(str) {\n    if (typeof str !== 'string') {\n      throw new Error('Expected string to serialize: ' + str);\n    }\n    return enc(str);\n  },\n  number: function(num) {\n    if (typeof num !== 'number') {\n      throw new Error('Expected number to serialize: ' + num);\n    }\n    return enc(String(num));\n  },\n  boolean: function(bool) {\n    if (typeof bool !== 'boolean') {\n      throw new Error('Expected boolean to serialize: ' + bool);\n    }\n    return bool ? '1' : '0';\n  },\n  date: function(date) {\n    if (!util.isDate(date)) {\n      throw new Error('Expected date to serialize: ' + date);\n    }\n    return enc(date.toISOString());\n  },\n  array: function(array) {\n    if (!util.isArray(array)) {\n      throw new Error('Expected array to serialize: ' + array);\n    }\n    return enc(JSON.stringify(array));\n  },\n  object: function(obj) {\n    return enc(JSON.stringify(obj));\n  }\n};\n\n/**\n * Get a serializer for a value of the given type.\n * @param {string} type Value type.\n * @return {function(*): string} Function that serializes a value to a string.\n */\nexports.get = function(type) {\n  if (!(type in serializers)) {\n    throw new Error('Unable to serialize type: ' + type);\n  }\n  return serializers[type];\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/hashed/lib/serializers.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/hashed/lib/serializers.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}}],"sources":{"node_modules/hashed/lib/serializers.js":"const util = require('util');\n\nconst enc = encodeURIComponent;\n\nconst serializers = {\n  string: function(str) {\n    if (typeof str !== 'string') {\n      throw new Error('Expected string to serialize: ' + str);\n    }\n    return enc(str);\n  },\n  number: function(num) {\n    if (typeof num !== 'number') {\n      throw new Error('Expected number to serialize: ' + num);\n    }\n    return enc(String(num));\n  },\n  boolean: function(bool) {\n    if (typeof bool !== 'boolean') {\n      throw new Error('Expected boolean to serialize: ' + bool);\n    }\n    return bool ? '1' : '0';\n  },\n  date: function(date) {\n    if (!util.isDate(date)) {\n      throw new Error('Expected date to serialize: ' + date);\n    }\n    return enc(date.toISOString());\n  },\n  array: function(array) {\n    if (!util.isArray(array)) {\n      throw new Error('Expected array to serialize: ' + array);\n    }\n    return enc(JSON.stringify(array));\n  },\n  object: function(obj) {\n    return enc(JSON.stringify(obj));\n  }\n};\n\n/**\n * Get a serializer for a value of the given type.\n * @param {string} type Value type.\n * @return {function(*): string} Function that serializes a value to a string.\n */\nexports.get = function(type) {\n  if (!(type in serializers)) {\n    throw new Error('Unable to serialize type: ' + type);\n  }\n  return serializers[type];\n};\n"},"lineCount":52}},"error":null,"hash":"5231f205a446fae220545be19fccb7cb","cacheData":{"env":{}}}