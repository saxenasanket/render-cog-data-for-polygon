{"id":"node_modules/hashed/lib/deserializers.js","dependencies":[{"name":"/Users/sanketsaxena/Desktop/pixxel/intact/ol-ext-parcel-bundler/package.json","includedInParent":true,"mtime":1588919574011},{"name":"/Users/sanketsaxena/Desktop/pixxel/intact/ol-ext-parcel-bundler/node_modules/hashed/package.json","includedInParent":true,"mtime":1588919548059},{"name":"./util","loc":{"line":1,"column":21},"parent":"/Users/sanketsaxena/Desktop/pixxel/intact/ol-ext-parcel-bundler/node_modules/hashed/lib/deserializers.js","resolved":"/Users/sanketsaxena/Desktop/pixxel/intact/ol-ext-parcel-bundler/node_modules/hashed/lib/util.js"}],"generated":{"js":"const util = require('./util');\n\nconst dec = decodeURIComponent;\n\nconst noop = function() {};\n\nconst deserializers = {\n  string: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    return dec(str);\n  },\n  number: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    const num = Number(dec(str));\n    if (isNaN(num)) {\n      throw new Error('Expected to deserialize a number: ' + str);\n    }\n    return num;\n  },\n  boolean: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    let bool;\n    if (str === '1') {\n      bool = true;\n    } else if (str === '0') {\n      bool = false;\n    } else {\n      throw new Error('Expected \"1\" or \"0\" for boolean: ' + str);\n    }\n    return bool;\n  },\n  date: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    const date = new Date(dec(str));\n    if (isNaN(date.getTime())) {\n      throw new Error('Expected to deserialize a date: ' + str);\n    }\n    return date;\n  },\n  array: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    let array;\n    try {\n      array = JSON.parse(dec(str));\n    } catch (err) {\n      noop();\n    }\n    if (!array || util.typeOf(array) !== 'array') {\n      throw new Error('Expected to deserialize an array: ' + str);\n    }\n    return array;\n  },\n  object: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    let obj;\n    try {\n      obj = JSON.parse(dec(str));\n    } catch (err) {\n      noop();\n    }\n    if (!obj || util.typeOf(obj) !== 'object') {\n      throw new Error('Expected to deserialize an object: ' + str);\n    }\n    return obj;\n  }\n};\n\n/**\n * Get a deserializer for a value of the given type.\n * @param {string} type Value type.\n * @return {function(string): *} Function that deserializes a string to a value.\n */\nexports.get = function(type) {\n  if (!(type in deserializers)) {\n    throw new Error('Unable to deserialize type: ' + type);\n  }\n  return deserializers[type];\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/hashed/lib/deserializers.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}}],"sources":{"node_modules/hashed/lib/deserializers.js":"const util = require('./util');\n\nconst dec = decodeURIComponent;\n\nconst noop = function() {};\n\nconst deserializers = {\n  string: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    return dec(str);\n  },\n  number: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    const num = Number(dec(str));\n    if (isNaN(num)) {\n      throw new Error('Expected to deserialize a number: ' + str);\n    }\n    return num;\n  },\n  boolean: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    let bool;\n    if (str === '1') {\n      bool = true;\n    } else if (str === '0') {\n      bool = false;\n    } else {\n      throw new Error('Expected \"1\" or \"0\" for boolean: ' + str);\n    }\n    return bool;\n  },\n  date: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    const date = new Date(dec(str));\n    if (isNaN(date.getTime())) {\n      throw new Error('Expected to deserialize a date: ' + str);\n    }\n    return date;\n  },\n  array: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    let array;\n    try {\n      array = JSON.parse(dec(str));\n    } catch (err) {\n      noop();\n    }\n    if (!array || util.typeOf(array) !== 'array') {\n      throw new Error('Expected to deserialize an array: ' + str);\n    }\n    return array;\n  },\n  object: function(str) {\n    if (!str || typeof str !== 'string') {\n      throw new Error('Expected string to deserialize: ' + str);\n    }\n    let obj;\n    try {\n      obj = JSON.parse(dec(str));\n    } catch (err) {\n      noop();\n    }\n    if (!obj || util.typeOf(obj) !== 'object') {\n      throw new Error('Expected to deserialize an object: ' + str);\n    }\n    return obj;\n  }\n};\n\n/**\n * Get a deserializer for a value of the given type.\n * @param {string} type Value type.\n * @return {function(string): *} Function that deserializes a string to a value.\n */\nexports.get = function(type) {\n  if (!(type in deserializers)) {\n    throw new Error('Unable to deserialize type: ' + type);\n  }\n  return deserializers[type];\n};\n"},"lineCount":91}},"error":null,"hash":"be4c12fe65531c0399eb9b4bb9c4b629","cacheData":{"env":{}}}